
% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
Introduction
------------
The zhnumber package provides commands to typeset Chinese representations of
numbers. The difference between this package and 'CJKnumb' is that commands
provided by this package is expandable in the proper way. So, it seems that
zhnumber is a good alternative to CJKnumb package.

It may be distributed and/or modified under the conditions of the
LaTeX Project Public License (LPPL), either version 1.3c of this license or
(at your option) any later version. The latest version of this license is in

   http://www.latex-project.org/lppl.txt

and version 1.3 or later is part of all distributions of LaTeX version
2005/12/01 or later.

This work has the LPPL maintenance status 'author-maintained'.

This work consists of the following files:
   README.txt (this file),
   zhnumber.dtx,
   zhnumber.ins,
   zhnum-gbk.cfg,
   zhnum-utf8.cfg
and of the derived file
   zhnumber.sty

Basic Usage
-----------
The package provides the following macros:

  \zhnumber{number}
    Convert `number' to a full Chinese representation.

  \zhnum{counter}
    Similar to \arabic{counter}, but representation of 'counter' as Chinese numerals.

  \zhdigits{number}
  \zhdigits*{number}
    Handle `number' as a string of digits and convert each of them into the
    corresponding Chinese digit. The starred version uses the Chinese circle glyph
    for digit zero; the unstarred version uses the traditional glyph.

Author
------
Qing Lee
Email: sobenlee@gmail.com

If you are interested in the process of development you may observe

    http://code.google.com/p/ctex-kit/


2012/05/07
Qing Lee
%</readme>
%<*internal>
\fi
%</internal>
%
%<*internal>
\begingroup
%</internal>
%<*batchfile>
\input docstrip.tex
\keepsilent
\preamble

  Copyright (C) 2012 by Qing Lee <sobenlee@gmail.com>
 --------------------------------------------------------------------------
  This work may be distributed and/or modified under the
  conditions of the LaTeX Project Public License, either version 1.3
  of this license or (at your option) any later version.
  The latest version of this license is in
    http://www.latex-project.org/lppl.txt
  and version 1.3 or later is part of all distributions of LaTeX
  version 2005/12/01 or later.

  This work has the LPPL maintenance status `author-maintained'.

\endpreamble
\postamble
\endpostamble
\askforoverwritefalse
\generate{\file{\jobname.sty}{\from{\jobname.dtx}{package}}}
%</batchfile>
%<batchfile>\endbatchfile
%<*internal>
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{batchfile}}}
\nopreamble\nopostamble
\generate{\file{README.txt}{\from{\jobname.dtx}{readme}}}
\endgroup
%</internal>
%
%<driver>\ProvidesFile{zhnumber.dtx}
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%
%<*driver>
\documentclass{l3doc}
\usepackage[UTF8,winfonts]{ctex}
\usepackage{zhnumber}
\usepackage{fvrb-ex}
\usepackage{metalogo}
\setlist{nosep}
\linespread{1.1}
\addtolength{\voffset}{-5\baselineskip}
\addtolength\textheight{8\baselineskip}
\setmainfont{TeX Gyre Pagella}
\setmonofont{Inconsolata}
\def\MacroFont{\small\normalfont\ttfamily}
\makeatletter
\let\orig@meta\meta
\def\meta#1{\orig@meta{\normalfont\itshape#1}}
\def\TF{true\orvar{}false}
\def\TTF{\defaultvar{true}\orvar{}false}
\def\TFF{true\orvar\defaultvar{false}}
\def\orvar{\char`\|}
\let\defaultvar\textbf
\def\argbrace#1{\char`\{#1\char`\}}
\@addtoreset{CodelineNo}{section}
\makeatother
\zhnumsetup{reset}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{\jobname.sty}
%
% \title{\bfseries\pkg{zhnumber} 宏包}
% \author{李清\\ \path{sobenlee@gmail.com}}
% \date{\filedate\qquad\fileversion}
% \maketitle
%
% \begin{documentation}
%
% \section{简介}
% \pkg{zhnumber} 宏包用于将阿拉伯数字按照中文格式输出。相比于 \pkg{CJKnumb}，它提供
% 的三个格式转换命令 |\zhnumber|、|\zhdigits| 和 |\zhnum| 都是可以适当展开的，可以
% 正常使用于 |PDF| 书签和交叉引用。
%
% \pkg{zhnumber} 支持 |GBK| 编码和 |UTF8| 编码，依赖 \pkg{xparse} 和 \pkg{l3keys2e} 宏包。
%
% \section{使用方法}
%
% \begin{function}{encoding}
%   \begin{syntax}
%     encoding = \meta{GBK\orvar{}UTF8}
%   \end{syntax}
%   指定编码的宏包选项，可以在调用宏包的时候设定，也可以用 |\zhnumsetup| 在导言区内设定。
%   对于 \XeLaTeX 和 \LuaLaTeX ，不用指定编码，宏包将自动使用 |UTF8| 编码；只有 \LaTeX
%   和 pdf\LaTeX 需要指定编码，此时如果没有指定，默认将使用 |GBK|。
% \end{function}
%
% \begin{function}{\zhnumber}
%   \begin{syntax}
%     \cs{zhnumber} \Arg{number}
%   \end{syntax}
%   以中文格式输出数字。这里的数字可以是整数、小数和分数。例如\\[1ex]
%   \begin{SideBySideExample}[frame=single,numbers=left,xrightmargin=.6\linewidth,gobble=5]
%     \zhnumber{2012020120}\\
%     \zhnumber{2 012 020 120}\\
%     \zhnumber{2,012,020,120}\\
%     \zhnumber{2012.020120}\\
%     \zhnumber{2012.}\\
%     \zhnumber{.2012}\\
%     \zhnumber{20120/20120}\\
%     \zhnumber{/2012}\\
%     \zhnumber{2012/}\\
%     \zhnumber{201;2020/120}
%   \end{SideBySideExample}
% \end{function}
%
% \begin{function}{\zhdigits}
%   \begin{syntax}
%     \cs{zhdigits} \Arg{number}
%   \end{syntax}
%   将阿拉伯数字转换为中文数字串。缺省状态下，|\zhdigits| 将 0 映射为〇，如果需要
%   将其映射为零，可以使用 |\zhdigits*|。例如\\[1ex]
%   \begin{SideBySideExample}[frame=single,numbers=left,xrightmargin=.6\linewidth,gobble=5]
%     \zhdigits{2012020120}\\
%     \zhdigits*{2012020120}
%   \end{SideBySideExample}
% \end{function}
%
% \begin{function}{\zhnum}
%   \begin{syntax}
%     \cs{zhnum} \Arg{counter}
%   \end{syntax}
%   与 |\roman| 等类似，用于将 \LaTeX 计数器的值转换为中文数字。例如\\[1ex]
%   \begin{SideBySideExample}[frame=single,numbers=left,xrightmargin=.6\linewidth,gobble=5]
%     \zhnum{section}
%   \end{SideBySideExample}
% \end{function}
%
% \begin{function}{\zhnumsetup}
%   \begin{syntax}
%     \cs{zhnumsetup} \argbrace{\meta{key1}=\meta{var1}, \meta{key2}=\meta{var2}, ...}
%   \end{syntax}
%   用于在导言区或文档中，设置中文数字的输出格式。目前可以设置的 \meta{key} 如下介绍。
% \end{function}
%
% \begin{function}{style}
%   \begin{syntax}
%     style = \argbrace{\meta{Simplified}\orvar\meta{Traditional}\orvar\meta{Normal}\orvar\meta{Financial}\orvar\meta{Ancient}}
%   \end{syntax}
%   意义分别为
%   \begin{itemize}[font=\ttfamily,labelsep=1em]
%     \item[Simplified]  以简体中文输出数字；
%     \item[Traditional] 以繁体中文输出数字；
%     \item[Normal] 以小写形式输出中文数字；
%     \item[Financial]  以大写形式输出中文数字；
%     \item[Ancient] 以廿输出 20，以卅输出 30，以卌输出 40，以皕输出 200。
%   \end{itemize}
%   可以设置 |style| 为其中一个，也可以是前三个与后两个的适当组合，默认是简体小写。例如\\[1ex]
%   \begin{SideBySideExample}[frame=single,numbers=left,xrightmargin=.4\linewidth,gobble=5]
%     \zhnumsetup{style={Traditional,Financial}}
%     \zhnumber{62012.3}\\
%     \zhnumsetup{style=Ancient}
%     \zhnumber{21}
%   \end{SideBySideExample}
% \end{function}
%
% \begin{function}{null}
%   \begin{syntax}
%     null = \meta{\TFF}
%   \end{syntax}
%   缺省状态下，除了 |\zhdigits| 外，其它的格式转换命令，将 0 映射成零，如果需要将 0 映射
%   成〇，可以使用这个选项。
% \end{function}
%
% \smallskip
%
% \pkg{zhnumber} 提供下列选项来控制阿拉伯数字的中文映射。
% \begin{verbatim}[frame=single]
%   - -0 0 1 2 3 4 5 6 7 8 9 10 20 30 40 200 E2 E3 E4 E8 dot and over
% \end{verbatim}
% 其中 |-| 设置负，|-0| 设置〇，|E2|、|E3|、|E4| 和 |E8| 分别设置百、千、万和亿，|dot|
% 设置小数的点，|and| 和 |over| 分别设置分数的“又”和“分之”。例如
% \begin{verbatim}[frame=single]
%   \zhnumsetup{2={两}}
% \end{verbatim}
% 可以将 2 映射成两。需要说明的是，\pkg{zhnumber} 将优先使用这里的设置，所以将会影响
% 到 |style| 选项。如果要恢复 |style| 的功能，可以使用 |reset| 选项。
%
% \begin{function}{reset}
%   \begin{syntax}
%     reset
%   \end{syntax}
%   用于恢复 \pkg{zhnumber} 对阿拉伯数字的初始化映射。
% \end{function}
%
% \section{已知问题}
%
% 目前 |\zhnumber| 能处理的最大整数是 $2^{31}-1=2\,147\,483\,647$，|\zhditits| 不受
% 这个大小的限制。如果去掉可以展开的限制，|\zhnumber| 也可以突破这个最大整数的限制，如何
% 在可以展开的条件下，突破这个最大整数的限制有待于解决。
%
% \end{documentation}
%
%
% \begin{implementation}
%
% \section{\pkg{zhnumber} 宏包代码实现}
%
% \iffalse
%<*package>
% \fi
%
%    \begin{macrocode}
\RequirePackage{xparse}
\RequirePackage{l3keys2e}
\ProvidesExplPackage {zhnumber} {2012/05/07} {1.2a}
  {package for typesetting numbers with Chinese glyphs}
%    \end{macrocode}
%
% \begin{macro}[internal]{\c_hundred_million}
%    \begin{macrocode}
\int_const:Nn \c_hundred_million { 100 000 000 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]
% {\zhnum_units:n,\zhnum_tens:n,\zhnum_hundreds:n,\zhnum_thousands:n}
% 分别用于截取一个四位数的个、十、百、千位。
%    \begin{macrocode}
\cs_new_nopar:Nn \zhnum_units:n
  { \int_mod:nn {#1} \c_ten }
\cs_new_nopar:Nn \zhnum_tens:n
  { \int_mod:nn { \int_div_truncate:nn {#1} \c_ten } \c_ten }
\cs_new_nopar:Nn \zhnum_hundreds:n
  { \int_mod:nn { \int_div_truncate:nn {#1} \c_one_hundred } \c_ten }
\cs_new_nopar:Nn \zhnum_thousands:n
  { \int_div_truncate:nn {#1} \c_one_thousand }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_number:n}
% 将输入的整数由低位到高位，以四位为一段进行处理。
%    \begin{macrocode}
\cs_new_nopar:Nn \zhnum_number:n
  {
    \int_compare:nNnTF {#1} < \c_hundred_million
      {
        \int_compare:nNnTF {#1} < \c_ten_thousand
          {
            \int_compare:nNnTF {#1} = \c_zero
              { \zhnum_digit_map:n \c_zero }
              { \zhnum_process_number:nn \c_one {#1} }
          }
          {
            \zhnum_process_number:nn \c_one { \int_div_truncate:nn {#1} \c_ten_thousand }
            \zhnum_digit_map:n \c_ten_thousand
            \int_compare:nNnF { \int_mod:nn {#1} \c_ten_thousand } = \c_zero
              { \zhnum_process_number:nn \c_zero { \int_mod:nn {#1} \c_ten_thousand } }
          }
      }
      {
        \zhnum_process_number:nn \c_one { \int_div_truncate:nn {#1} \c_hundred_million }
        \zhnum_digit_map:n \c_hundred_million
        \int_compare:nNnF { \int_mod:nn {#1} \c_hundred_million } = \c_zero
          {
            \int_compare:nNnTF { \int_mod:nn {#1} \c_hundred_million } < \c_ten_thousand
              {
                \int_compare:nNnF { \int_mod:nn {#1} \c_hundred_million } < \c_one_thousand
                  { \zhnum_digit_map:n \c_zero }
              }
              {
                \zhnum_process_number:nn \c_zero
                  { \int_mod:nn { \int_div_truncate:nn {#1} \c_ten_thousand } \c_ten_thousand }
                \zhnum_digit_map:n \c_ten_thousand
              }
            \int_compare:nNnF { \int_mod:nn {#1} \c_ten_thousand } = \c_zero
              { \zhnum_process_number:nn \c_zero { \int_mod:nn {#1} \c_ten_thousand } }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_process_number:nn}
% 对四位数字按情况进行处理。
%    \begin{macrocode}
\cs_new_nopar:Nn \zhnum_process_number:nn
  {
    \int_compare:nNnTF { \zhnum_thousands:n {#2} } = \c_zero
      {
        \int_compare:nNnT {#1} = \c_zero
          { \zhnum_digit_map:n \c_zero }
      }
      {
        \zhnum_digit_map:n { \zhnum_thousands:n {#2} }
        \zhnum_digit_map:n \c_one_thousand
      }
    \int_compare:nNnTF { \zhnum_hundreds:n {#2} } = \c_zero
      {
        \bool_if:nT
          {
            \int_compare_p:nNn { \zhnum_thousands:n {#2} }         > \c_zero &&
            \int_compare_p:nNn { \int_mod:nn {#2} \c_one_hundred } > \c_zero
          }
          { \zhnum_digit_map:n \c_zero }
      }
      {
        \bool_if:nTF
          {
            \l_zhnum_ancient_bool                                  &&
            \int_compare_p:nNn { \zhnum_hundreds:n {#2} } = \c_two
          }
          { \zhnum_digit_map:n { \zhnum_hundreds:n {#2} * \c_one_hundred } }
          {
            \zhnum_digit_map:n { \zhnum_hundreds:n {#2} }
            \zhnum_digit_map:n \c_one_hundred
          }
      }
    \int_compare:nNnTF { \zhnum_tens:n {#2} } = \c_zero
      {
        \bool_if:nT
          {
            \int_compare_p:nNn { \zhnum_hundreds:n {#2} } > \c_zero &&
            \int_compare_p:nNn { \zhnum_units:n    {#2} } > \c_zero
          }
          { \zhnum_digit_map:n \c_zero }
      }
      {
        \bool_if:nF
          {
            \int_compare_p:nNn { \zhnum_tens:n {#2} } = \c_one &&
            \int_compare_p:nNn {#2} < \c_one_hundred           &&
            ! ( \int_compare_p:nNn {#1} = \c_zero )
          }
          {
            \bool_if:nTF
              {
                \l_zhnum_ancient_bool                                     &&
                ( \int_compare_p:nNn { \zhnum_tens:n {#2} } = \c_two   ||
                  \int_compare_p:nNn { \zhnum_tens:n {#2} } = \c_three ||
                  \int_compare_p:nNn { \zhnum_tens:n {#2} } = \c_four )
              }
              {
                \zhnum_digit_map:n { \zhnum_tens:n {#2} * \c_ten }
                \use_none:nn
              }
              { \zhnum_digit_map:n { \zhnum_tens:n {#2} } }
          }
        \zhnum_digit_map:n \c_ten
      }
    \int_compare:nNnF { \zhnum_units:n {#2} } = \c_zero
      { \zhnum_digit_map:n { \zhnum_units:n {#2} } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_integer:n}
% 对负数进行预处理。
%    \begin{macrocode}
\cs_new_nopar:Nn \zhnum_integer:n
  {
    \int_compare:nNnT { \zhnum_erase_comma:f {#1} } < \c_zero
      { \zhnum_digit_map:n \c_minus_one }
    \zhnum_number:n { \int_abs:n { \zhnum_erase_comma:f {#1} } }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\zhnum}
% 用于将 \LaTeX 计数器按中文格式输出。
%    \begin{macrocode}
\cs_new_nopar:Npn \zhnum #1
  {
    \exp_args:Nc \token_if_int_register:NTF { c@#1 }
      { \exp_args:Nv \zhnum_integer:n { c@#1 } }
      { \@nocounterr {#1} }
  }
%    \end{macrocode}
% \end{macro}

%
% \begin{macro}{\zhnumber}
% 用于将输入的数字按照中文格式输出。
%    \begin{macrocode}
\cs_new_nopar:Npn \zhnumber #1 { \zhnum_number:w #1 . \q_nil . \q_stop }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_number:w}
% 先判断输入的是小数还是分数。
%    \begin{macrocode}
\cs_new_nopar:Npn \zhnum_number:w #1.#2.#3 \q_stop
  {
    \quark_if_nil:nTF {#2}
      { \zhnum_integer_or_fraction:w #1 / \q_nil / \q_stop }
      { \zhnum_decimal:nn {#1} {#2} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_integer_or_fraction:w}
% 判断是否输入的是分数。
%    \begin{macrocode}
\cs_new_nopar:Npn \zhnum_integer_or_fraction:w #1/#2/#3 \q_stop
  {
    \quark_if_nil:nTF {#2}
      { \zhnum_integer:n {#1} }
      { \zhnum_fraction:w #2 \q_mark #1 ; \q_nil ; \q_stop }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_fraction:w}
% 对分数进行预处理。
%    \begin{macrocode}
\cs_new_nopar:Npn \zhnum_fraction:w #1 \q_mark #2;#3;#4 \q_stop
  {
    \quark_if_nil:nTF {#3}
      {
        \zhnum_blank_to_zero:f {#1} \c_zhnum_over_tl
        \zhnum_blank_to_zero:f {#2}
      }
      {
        \tl_if_blank:fF {#2} { \zhnumber {#2} \c_zhnum_and_tl }
        \zhnum_blank_to_zero:f {#1} \c_zhnum_over_tl
        \zhnum_blank_to_zero:f {#3}
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_decimal:nn}
% 对小数进行预处理。
%    \begin{macrocode}
\cs_new_nopar:Nn \zhnum_decimal:nn
  {
    \zhnum_blank_to_zero:f {#1} \c_zhnum_dot_tl
    \tl_if_blank:fTF {#2} { \zhnum_digit_map:n \c_zero } { \zhdigits * {#2} }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_blank_to_zero:n}
% 输出小数的整数位。
%    \begin{macrocode}
\cs_new_nopar:Nn \zhnum_blank_to_zero:n
  { \tl_if_blank:nTF {#1} { \zhnum_digit_map:n \c_zero } { \zhnumber {#1} } }
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\cs_generate_variant:Nn \zhnum_blank_to_zero:n { f }
\cs_generate_variant:Nn \tl_reverse:n          { f }
\cs_generate_variant:Nn \tl_if_blank:nTF       { f }
\cs_generate_variant:Nn \tl_if_blank:nF        { f }
\cs_generate_variant:Nn \tl_map_function:nN    { f }
%    \end{macrocode}
%
% \begin{macro}{\zhdigits}
% 将输入的数字输出为中文数字串输出。
%    \begin{macrocode}
\DeclareExpandableDocumentCommand \zhdigits { s m }
  {
    \IfBooleanTF #1
      { \tl_map_function:fN {#2} \zhnum_digits_zero_aux:N }
      { \tl_map_function:fN {#2} \zhnum_digits_null_aux:N }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]
% {\zhnum_digits_null_aux:N,\zhnum_digits_zero_aux:N,\zhnum_digits_aux:nn}
% 将输入的数字输出为中文数字串输出。
%    \begin{macrocode}
\cs_new_nopar:Nn \zhnum_digits_null_aux:N { \zhnum_digits_aux:nn \c_zhnum_null_int {#1} }
\cs_new_nopar:Nn \zhnum_digits_zero_aux:N { \zhnum_digits_aux:nn \c_zero {#1} }
\cs_new_nopar:Nn \zhnum_digits_aux:nn
  {
    \str_if_eq:xxF {#2} ,
      {
        \str_if_eq:xxTF {#2} . \c_zhnum_dot_tl
          {
            \zhnum_digit_map:n
              {
                \str_if_eq:xxTF {#2} - \c_minus_one
                  {
                    \bool_if:nTF
                      {
                        \int_compare_p:nNn {#2} = \c_zero           &&
                        \int_compare_p:nNn {#1} = \c_zhnum_null_int
                      }
                      { \c_zhnum_null_int } {#2}
                  }
              }
          }
      }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_erase_comma:n,\zhnum_erase_comma_aux:N}
% 去除输入数字中的空格和逗号。
%    \begin{macrocode}
\cs_new_nopar:Nn \zhnum_erase_comma:n
  { \tl_map_function:nN {#1} \zhnum_erase_comma_aux:N }
\cs_new_nopar:Nn \zhnum_erase_comma_aux:N
  { \str_if_eq:xxF {#1} , {#1} }
\cs_generate_variant:Nn \zhnum_erase_comma:n { f }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\c_zhnum_null_int}
% 设置“〇”对应的阿拉伯数字。
%    \begin{macrocode}
\int_const:Nn \c_zhnum_null_int { -10 }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}[internal]{\zhnum_digit_map:n}
% 阿拉伯数字与中文数字的映射。
%    \begin{macrocode}
\cs_new_nopar:Nn \zhnum_digit_map:n
  {
    \prg_case_int:nnn {#1}
      {
        { \c_minus_one       } { \c_zhnum_minus_tl          }
        { \c_zero            } { \c_zhnum_zero_tl           }
        { \c_one             } { \c_zhnum_one_tl            }
        { \c_two             } { \c_zhnum_two_tl            }
        { \c_three           } { \c_zhnum_three_tl          }
        { \c_four            } { \c_zhnum_four_tl           }
        { \c_five            } { \c_zhnum_five_tl           }
        { \c_six             } { \c_zhnum_six_tl            }
        { \c_seven           } { \c_zhnum_seven_tl          }
        { \c_eight           } { \c_zhnum_eight_tl          }
        { \c_nine            } { \c_zhnum_nine_tl           }
        { \c_ten             } { \c_zhnum_ten_tl            }
        { \c_one_hundred     } { \c_zhnum_hundred_tl        }
        { \c_one_thousand    } { \c_zhnum_thousand_tl       }
        { \c_ten_thousand    } { \c_zhnum_tenthousand_tl    }
        { \c_hundred_million } { \c_zhnum_hundredmillion_tl }
        { \c_zhnum_null_int  } { \c_zhnum_null_tl           }
        { 20                 } { \c_zhnum_twenty_tl         }
        { 30                 } { \c_zhnum_thirty_tl         }
        { 40                 } { \c_zhnum_forty_tl          }
        { 200                } { \c_zhnum_two_hundred_tl    }
      }
      { \prg_do_nothing: }
  }
%    \end{macrocode}
% \end{macro}

% 根据需要设置中文阿拉伯数字。
%    \begin{macrocode}
\keys_define:nn { zhnum / options }
  {
    -   .tl_set:N = \c_zhnum_minus_tl          ,
    -0  .tl_set:N = \c_zhnum_null_tl           ,
    0   .tl_set:N = \c_zhnum_zero_tl           ,
    1   .tl_set:N = \c_zhnum_one_tl            ,
    2   .tl_set:N = \c_zhnum_two_tl            ,
    3   .tl_set:N = \c_zhnum_three_tl          ,
    4   .tl_set:N = \c_zhnum_four_tl           ,
    5   .tl_set:N = \c_zhnum_five_tl           ,
    6   .tl_set:N = \c_zhnum_six_tl            ,
    7   .tl_set:N = \c_zhnum_seven_tl          ,
    8   .tl_set:N = \c_zhnum_eight_tl          ,
    9   .tl_set:N = \c_zhnum_nine_tl           ,
    10  .tl_set:N = \c_zhnum_ten_tl            ,
    20  .tl_set:N = \c_zhnum_twenty_tl         ,
    30  .tl_set:N = \c_zhnum_thirty_tl         ,
    40  .tl_set:N = \c_zhnum_forty_tl          ,
    200 .tl_set:N = \c_zhnum_two_hundred_tl    ,
    E2  .tl_set:N = \c_zhnum_hundred_tl        ,
    E3  .tl_set:N = \c_zhnum_thousand_tl       ,
    E4  .tl_set:N = \c_zhnum_tenthousand_tl    ,
    E8  .tl_set:N = \c_zhnum_hundredmillion_tl ,
  }
%    \end{macrocode}
%
% \begin{macro}[internal]{\zhnum_load_cfg:}
% 根据选定编码载入配置文件。
%    \begin{macrocode}
\cs_new:Nn \zhnum_load_cfg:
  {
    \file_input:n
      { zhnum - \bool_if:NTF \g_zhnum_gbk_bool { gbk } { utf8 } .cfg }
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{encoding,style,null,reset}
% 宏包设置选项。
%    \begin{macrocode}
\keys_define:nn { zhnum / options }
  {
    encoding .choice: ,
    encoding / UTF8     .code:n = { \bool_gset_false:N \g_zhnum_gbk_bool \zhnum_load_cfg: } ,
    encoding / GBK      .code:n = { \bool_gset_true:N  \g_zhnum_gbk_bool \zhnum_load_cfg: } ,
    encoding         .default:n = { GBK } ,
    style .multichoice: ,
    style / Normal      .code:n =
      {
        \bool_set_false:N \l_zhnum_ancient_bool
        \bool_set_true:N  \l_zhnum_normal_bool
      } ,
    style / Financial   .code:n =
      {
        \bool_set_false:N \l_zhnum_ancient_bool
        \bool_set_false:N \l_zhnum_normal_bool
      } ,
    style / Ancient     .code:n =
      {
        \bool_set_true:N \l_zhnum_ancient_bool
        \bool_set_true:N \l_zhnum_normal_bool
      } ,
    style / Simplified  .code:n = { \bool_set_true:N  \l_zhnum_simp_bool } ,
    style / Traditional .code:n = { \bool_set_false:N \l_zhnum_simp_bool } ,
    style            .default:n = { Normal , Simplified } ,
    null            .bool_set:N = \l_zhnum_null_bool ,
    reset               .code:n = \zhnum_load_cfg: ,
    dot               .tl_set:N = \c_zhnum_dot_tl  ,
    and               .tl_set:N = \c_zhnum_and_tl  ,
    over              .tl_set:N = \c_zhnum_over_tl ,
  }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\zhnumsetup}
% 在文档中设置 \pkg{zhnumber} 的接口。
%    \begin{macrocode}
\NewDocumentCommand \zhnumsetup { m }
  {
    \keys_set:nn { zhnum / options } {#1}
    \tex_ignorespaces:D
  }
%    \end{macrocode}
% \end{macro}
%
% 初始化设置和执行宏包选项。
%    \begin{macrocode}
\keys_set:nn { zhnum / options } { style , null = false }
\ProcessKeysOptions { zhnum / options }
%    \end{macrocode}
%
% 如果没有选定编码，则根据引擎自动设置编码。
%    \begin{macrocode}
\ExplSyntaxOn
\cs_generate_variant:Nn \keys_set:nn { nx }
\bool_if_exist:NF \g_zhnum_gbk_bool
  {
    \keys_set:nx { zhnum / options }
      {
        encoding =
          {
            \bool_if:nTF { \xetex_if_engine_p: || \luatex_if_engine_p: }
              { UTF8 } { GBK }
          }
      }
  }
\ExplSyntaxOff
%    \end{macrocode}
%
% \iffalse
%</package>
% \fi
%
% \end{implementation}
%
% \Finale
%
\endinput
