% ctex-common.def: common definitions for all ctex packages/classes
% vim:ft=tex

\@ifclassloaded{article}{\def\CTEX@class{article}}{}
\@ifclassloaded{report} {\def\CTEX@class{report}}{}
\@ifclassloaded{book}   {\def\CTEX@class{book}}{}

% Load some extra packages

\IfFileExists{expl3.sty}{%
  \RequirePackage{expl3}}{}

\RequirePackage{ifpdf}
\RequirePackage{ifxetex}

\ifxetex % XeTeX always uses UTF-8 as default encoding
  \CTEX@set@opt{encoding=UTF8,engine=xeCJK}
  \let\CTEX@strcmp\strcmp
\else
  \let\CTEX@strcmp\pdfstrcmp
\fi

\ifCTEX@indent
  \RequirePackage{indentfirst}
\fi
\RequirePackage{fix-cm}
\ifCTEX@fancyhdr
  \RequirePackage{fancyhdr}
\fi

% Useful definitions

\DeclareRobustCommand\CTeX{C\kern-.05em\TeX{}}
\newcommand*\CTEX@key{\define@key{CTEX}}
\newcommand*\CTEXoptions[1][]{\kvsetkeys{CTEX}{#1}}
\newcommand*\CTEX@subkey[1]{\define@key{CTEX#1}}
\newcommand*\CTEXsetup[2][]{\kvsetkeys{CTEX#2}{#1}}

\def\CTEX@IfStrEq#1#2{%
  \ifnum\CTEX@strcmp{#1}{#2}=\z@
    \expandafter\@firstoftwo
  \else
    \expandafter\@secondoftwo
  \fi}

\def\ifCTEX@encoding#1{\CTEX@IfStrEq\CTEX@encoding{#1}}
\def\ifCTEX@engine  #1{\CTEX@IfStrEq\CTEX@engine  {#1}}
\def\ifCTEX@fontset #1{\CTEX@IfStrEq\CTEX@fontset {#1}}
\def\ifCTEX@cls     #1{\CTEX@IfStrEq\CTEX@class   {#1}}

\def\CTEX@replacecommand#1#2#3{%
  \csletcs{#1#3}{#2#3}%
  \csdef{#2#3}{\csuse{#1#3}}}

% Select engine: xetex has the highest priority, if not,
% then try cct, otherwise we use traditional cjk.

\ifCTEX@engine{CCT}{
  \CTEX@set@opt{encoding=GBK}
  \input{ctex-cct-engine.def}
}{
  \ifCTEX@engine{xeCJK}
    {\input{ctex-xecjk-engine.def}}
    {\input{ctex-cjk-engine.def}}
  \input{ctex-cjk-common.def}
}

\AtEndOfPackage{%
  \makeatletter
  \ifCTEX@encoding{GBK}
    {\input{ctex-gbk.def}}
    {\input{ctex-utf8.def}}%
  \makeatother}

\newcommand*\CTEXindent{\CTEXsetfont\parindent2\ccwd}
\newcommand*\CTEXnoindent{\parindent\z@}
\ifCTEX@indent
  \AtBeginDocument{\CTEXindent}
\fi
\def\CTEX@spaceChar{\hskip \f@size \p@}
\def\baselinestretch{1.3}

% About numbers

\newif\ifCTEX@zero@
\newif\ifCTEX@previous@
\newif\ifCTEX@null@
\newcount\CTEX@q
\newcount\CTEX@r
\def\CTEX@appendstring#1#2{%
  \expandafter\def\expandafter#1\expandafter{#1#2}}
\def\CTEX@appendnumber#1#2{%
  \ifcase #2\relax
    \ifCTEX@null@
      \CTEX@appendstring{#1}{\CTEX@null}%
    \else
      \CTEX@appendstring{#1}{\CTEX@zero}%
    \fi
  \or \CTEX@appendstring{#1}{\CTEX@one}%
  \or \CTEX@appendstring{#1}{\CTEX@two}%
  \or \CTEX@appendstring{#1}{\CTEX@three}%
  \or \CTEX@appendstring{#1}{\CTEX@four}%
  \or \CTEX@appendstring{#1}{\CTEX@five}%
  \or \CTEX@appendstring{#1}{\CTEX@six}%
  \or \CTEX@appendstring{#1}{\CTEX@seven}%
  \or \CTEX@appendstring{#1}{\CTEX@eight}%
  \or \CTEX@appendstring{#1}{\CTEX@nine}%
  \fi}
\def\CTEX@splitnumber#1{%
  \CTEX@q #1\relax
  \CTEX@r #1\relax
  \divide\CTEX@q \@M
  \begingroup
    \multiply\CTEX@q \@M
    \advance\CTEX@r -\CTEX@q
    \ifnum\CTEX@r = \z@
      \xdef\CTEX@low{}%
    \else
      \xdef\CTEX@low{\number\CTEX@r}%
    \fi
  \endgroup
  \ifnum\CTEX@q > \z@
    \CTEX@r \CTEX@q
    \divide\CTEX@q \@M
    \begingroup
      \multiply\CTEX@q \@M
      \advance\CTEX@r -\CTEX@q
      \ifnum\CTEX@r = \z@
        \xdef\CTEX@high{}%
      \else
        \xdef\CTEX@high{\number\CTEX@r}%
      \fi
    \endgroup
    \ifnum\CTEX@q > \z@
      \xdef\CTEX@yi{\number\CTEX@q}%
    \else
      \xdef\CTEX@yi{}%
    \fi
  \else
    \xdef\CTEX@high{}%
    \xdef\CTEX@yi{}%
  \fi
}
\def\CTEX@processnumber#1#2{%
  \CTEX@zero@false
  \CTEX@q #2\relax
  \CTEX@r #2\relax
  \divide\CTEX@q \@m
  \ifnum\CTEX@q = \z@
    \ifCTEX@previous@
      \CTEX@zero@true
    \fi
  \else
    \ifCTEX@zero@
      \CTEX@appendstring{#1}{\CTEX@zero}%
    \fi
    \CTEX@appendnumber{#1}{\CTEX@q}%
    \CTEX@appendstring{#1}{\CTEX@thousand}%
    \CTEX@previous@true
    \CTEX@zero@false
  \fi
  \multiply\CTEX@q \@m
  \advance\CTEX@r -\CTEX@q
  \CTEX@q \CTEX@r
  \divide\CTEX@q 100\relax
  \ifnum\CTEX@q = \z@
    \ifCTEX@previous@
      \CTEX@zero@true
    \fi
  \else
    \ifCTEX@zero@
      \CTEX@appendstring{#1}{\CTEX@zero}%
    \fi
    \CTEX@appendnumber{#1}{\CTEX@q}%
    \CTEX@appendstring{#1}{\CTEX@hundred}%
    \CTEX@previous@true
    \CTEX@zero@false
  \fi
  \multiply\CTEX@q 100
  \advance\CTEX@r -\CTEX@q
  \CTEX@q \CTEX@r
  \divide \CTEX@q 10\relax
  \ifnum\CTEX@q = \z@
    \ifCTEX@previous@
      \CTEX@zero@true
    \fi
  \else
    \ifCTEX@zero@
      \CTEX@appendstring{#1}{\CTEX@zero}%
    \fi
    \ifnum\CTEX@q = \@ne
      \ifCTEX@previous@
        \CTEX@appendstring{#1}{\CTEX@one}%
      \fi
    \else
      \CTEX@appendnumber{#1}{\CTEX@q}%
    \fi
    \CTEX@appendstring{#1}{\CTEX@ten}%
    \CTEX@previous@true
    \CTEX@zero@false
  \fi
  \multiply\CTEX@q 10
  \advance\CTEX@r -\CTEX@q
  \unless\ifnum\CTEX@r = \z@
    \ifCTEX@zero@
      \CTEX@appendstring{#1}{\CTEX@zero}%
    \fi
    \CTEX@appendnumber{#1}{\CTEX@r}%
    \CTEX@previous@true
  \fi}
\DeclareRobustCommand\CTEXnumber[2]{%
  \def#1{}%
  \CTEX@null@false
  \CTEX@q #2\relax
  \ifnum\CTEX@q < \z@
    \multiply\CTEX@q \m@ne
    \CTEX@appendstring{#1}{\CTEX@minus}%
  \fi
  \CTEX@previous@false
  \CTEX@zero@false
  \ifnum\CTEX@q = \z@
    \CTEX@appendstring{#1}{\CTEX@zero}%
  \else
    \CTEX@splitnumber{\CTEX@q}%
    \unless\ifx\CTEX@yi \@empty
      \CTEX@processnumber{#1}{\CTEX@yi}%
      \CTEX@appendstring{#1}{\CTEX@hundredmillion}%
    \fi
    \unless\ifx\CTEX@high \@empty
      \CTEX@processnumber{#1}{\CTEX@high}%
      \CTEX@appendstring{#1}{\CTEX@tenthousand}%
    \fi
    \unless\ifx\CTEX@low \@empty
      \unless\ifx\CTEX@yi \@empty
        \ifx\CTEX@high \@empty
          \CTEX@appendstring{#1}{\CTEX@zero}% this catches 100002345
        \fi
      \fi
      \CTEX@processnumber{#1}{\CTEX@low}%
    \fi
  \fi}
\def\CTEX@getdigit#1#2\@nil{%
  \edef\CTEX@tempa{#1}%
  \edef\CTEX@tempb{#2}}
\DeclareRobustCommand\CTEXdigits[2]{%
  \def#1{}%
  \CTEX@null@true
  \edef\CTEX@tempa{}%
  \edef\CTEX@tempb{#2}%
  \unless\ifx\CTEX@tempb \@empty
    \loop
      \expandafter\CTEX@getdigit\CTEX@tempb\@nil
      \CTEX@appendnumber{#1}{\CTEX@tempa}%
      \unless\ifx\CTEX@tempb \@empty
    \repeat
  \fi}
\DeclareRobustCommand\CTEXcounter[1]{%
  \ifcsundef{c@#1}{}{%
    \CTEXnumber{\reserved@a}{\@arabic\csname c@#1\endcsname}%
    \csedef{cc@#1}{\expandonce\reserved@a}}}
\AtBeginDocument{%
  \makeatletter%
  \ifundef\CTEX@save@setcounter{%
    \let\CTEX@save@setcounter\setcounter%
    \def\setcounter#1#2{%
        \CTEX@save@setcounter{#1}{#2}%
        \CTEXcounter{#1}}}{}%
  \ifundef\CTEX@save@addtocounter{%
    \let\CTEX@save@addtocounter\addtocounter%
    \def\addtocounter#1#2{%
        \CTEX@save@addtocounter{#1}{#2}%
        \CTEXcounter{#1}}}{}%
  \ifundef\CTEX@save@stepcounter{%
    \let\CTEX@save@stepcounter\stepcounter%
    \def\stepcounter#1{%
        \CTEX@save@stepcounter{#1}%
        \CTEXcounter{#1}}}{}%
  \makeatother}
\def\chinese#1{%
  \ifcsundef{cc@#1}{\CTEX@null}{\csuse{cc@#1}}}
\def\Chinese#1{\CTEXcounter{#1}\chinese{#1}}

% About caption

\ifCTEX@cap
  \let\CTEX@save@refstepcounter\refstepcounter
  \def\refstepcounter#1{\CTEX@save@refstepcounter{#1}%
    \protected@edef\@currentlabel
      {\csuse{p@#1}%
       \ifcsundef{CTEX@the#1}{\csuse{the#1}}{\csuse{CTEX@the#1}}%
      }}%
\fi

% `today' definitions

\let\CTEX@todayold\today
\ifCTEX@cap
  \renewcommand*\today{\CTEX@todaysmall}
\fi
\CTEX@key{today}{\CTEX@settoday{#1}}
\newcommand*\CTEX@settoday[1]{%
  \ifcsundef{CTEX@today#1}
    {\PackageError{ctex}{%
       unknown today format}{%
       Available today format are "old", "small", and "big".}}
    {\renewcommand*\today{\csuse{CTEX@today#1}}}}

% Put hyperref as bottom as possible, otherwise there may be page
% count issues
\ifCTEX@hyperref
\providecommand\hypersetup[1]{%
  \PassOptionsToPackage{#1}{hyperref}}
\AtEndPreamble{%
  \RequirePackage{hyperref}}
\AtEndOfPackage{%
  \ifCTEX@encoding{GBK}{%
    \unless\ifxetex
      \hypersetup{CJKbookmarks}
      \unless\ifpdf % dvipdfmx
        \AtBeginDvi{\special{pdf:tounicode GBK-EUC-UCS2}}%
      \fi
    \fi
  }{\hypersetup{unicode}}
  \hypersetup{driverfallback=dvipdfmx,colorlinks=true}
}
\fi % hyperref

\endinput
